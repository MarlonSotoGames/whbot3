// index.js
const express = require('express');
const { MessagingResponse } = require('twilio').twiml;

const app = express();
app.use(express.urlencoded({ extended: false }));

/* =========================
   CONFIG NEGOCIO / CAT√ÅLOGO
   ========================= */

const BUSINESS = {
  marca: 'MS Games',
  whatsapp_publico: '+506 8902 8220',
  web: 'https://msgames.example', // opcional, puedes dejarlo vac√≠o
  ubicacion: 'Costa Rica'
};

// Curso en vivo pr√≥ximo
const PROXIMO_EN_VIVO = {
  clave: 'whatsapp',
  nombre: 'C√≥mo crear un chatbot de WhatsApp',
  inicio: 'Jueves 18 de septiembre, 7:00 pm',
  sesiones: 3,
  duracion_por_clase: '1 hora c/u',
  inversion: '‚Ç°5.650',
  temario: [
    'Fundamentos de WhatsApp y flujo Sandbox ‚Üí Producci√≥n',
    'Webhook + respuestas autom√°ticas (Node.js)',
    'Buenas pr√°cticas, pruebas y checklist de publicaci√≥n'
  ],
  notas: 'No tiene temario oficial; este es un esquema de prueba.'
};

// Cat√°logo de cursos (asincr√≥nicos y con posibilidad de abrir en vivo)
const CURSOS = [
  {
    clave: 'python',
    nombre: 'Python b√°sico-intermedio',
    sin√≥nimos: ['python', 'py', 'curso de python'],
    modalidad: { en_vivo: '3 meses, 1 clase/semana (‚Ç°11.300/mes)', asincrono: '‚Ç°16.950' },
    temario: [
      'Sintaxis y tipos de datos',
      'Control de flujo y funciones',
      'M√≥dulos, entornos y librer√≠as',
      'Archivos y manejo de errores',
      'Introducci√≥n a requests y consumo de APIs',
      'Proyecto de cierre (scripts √∫tiles)'
    ]
  },
  {
    clave: 'sql',
    nombre: 'SQL b√°sico-intermedio',
    sin√≥nimos: ['sql', 'bases de datos', 'consulta sql'],
    modalidad: { en_vivo: '4 meses, 1 clase/semana (‚Ç°11.300/mes)', asincrono: '‚Ç°22.600' },
    temario: [
      'SELECT, WHERE, ORDER BY',
      'JOINs (INNER/LEFT/RIGHT/FULL)',
      'Agregaciones y GROUP BY',
      'Subconsultas y CTEs',
      'Funciones de ventana',
      'Modelado y mejores pr√°cticas'
    ]
  },
  {
    clave: 'photoshop',
    nombre: 'Photoshop b√°sico-intermedio',
    sin√≥nimos: ['photoshop', 'ps', 'edici√≥n de im√°genes'],
    modalidad: { en_vivo: '2 meses, 1 clase/semana (‚Ç°11.300/mes)', asincrono: '‚Ç°11.300' },
    temario: [
      'Interfaz y herramientas esenciales',
      'Capas, m√°scaras y selecciones',
      'Retoque y ajustes de color',
      'Tipograf√≠a y composici√≥n',
      'Exportaci√≥n para web y redes',
      'Mini proyecto de marca personal'
    ]
  },
  {
    clave: 'figma',
    nombre: 'Figma b√°sico-intermedio',
    sin√≥nimos: ['figma', 'ui', 'ux', 'dise√±o de interfaces'],
    modalidad: { en_vivo: '3 meses, 1 clase/semana (‚Ç°11.300/mes)', asincrono: '‚Ç°16.950' },
    temario: [
      'Frames, auto-layout y componentes',
      'Grids, estilos y librer√≠as',
      'Prototipado e interacciones',
      'Dise√±o responsive',
      'Hand-off y exportaci√≥n',
      'Proyecto UI (landing/app)'
    ]
  },
  {
    clave: 'videojuegos',
    nombre: 'Programaci√≥n de videojuegos de plataformas 2D',
    sin√≥nimos: ['videojuegos', 'juegos 2d', 'godot', 'plataformas'],
    modalidad: { en_vivo: '5 semanas, 1 clase/semana (‚Ç°11.300 √∫nico)', asincrono: '‚Ç°8.475' },
    temario: [
      'Introducci√≥n a Godot y escenas',
      'Movimiento del personaje y f√≠sicas',
      'Colisiones, niveles y c√°maras',
      'UI b√°sica, audio y part√≠culas',
      'Construcci√≥n y exportaci√≥n del juego'
    ]
  }
];

// Helpers
const normalize = (s = '') =>
  s
    .toLowerCase()
    .normalize('NFD').replace(/[\u0300-\u036f]/g, '')
    .replace(/[^a-z0-9\s]/g, ' ')
    .replace(/\s+/g, ' ')
    .trim();

const incluyeAlguna = (texto, palabras = []) =>
  palabras.some(p => texto.includes(p));

// Match de curso por nombre/sin√≥nimo
function encontrarCurso(texto) {
  const n = normalize(texto);
  // whatsapp (pr√≥ximo en vivo)
  if (incluyeAlguna(n, ['whatsapp', 'chatbot', 'bot'])) {
    return { tipo: 'proximo', data: PROXIMO_EN_VIVO };
  }
  // cat√°logo
  for (const c of CURSOS) {
    if (incluyeAlguna(n, [c.clave, ...c.sin√≥nimos.map(normalize)])) {
      return { tipo: 'catalogo', data: c };
    }
  }
  return null;
}

function menuPrincipal() {
  return [
    `ü§ñ *${BUSINESS.marca}* ‚Äî Cursos online de inform√°tica y programaci√≥n`,
    '',
    'Escrib√≠ una palabra clave o n√∫mero:',
    '1) Pr√≥ximo curso en vivo (WhatsApp)',
    '2) Ver cursos disponibles',
    '3) Precios y modalidades',
    '4) Temarios',
    '5) Contacto con asesor',
    '',
    'Ejemplos: "precio photoshop", "temario sql", "python", "whatsapp".'
  ].join('\n');
}

function listarCursos() {
  const lineas = CURSOS.map(c => `‚Ä¢ ${c.nombre} (${c.clave})`);
  return [
    'üìö *Cursos disponibles (asincr√≥nicos y posibles aperturas en vivo)*',
    ...lineas,
    '',
    'Pregunt√° por uno con su nombre/clave. Ej: "temario figma", "precio sql".'
  ].join('\n');
}

function infoProximoEnVivo() {
  const c = PROXIMO_EN_VIVO;
  return [
    `üéØ *Pr√≥ximo curso en vivo:* ${c.nombre}`,
    `üóì Inicio: ${c.inicio}`,
    `üìç Clases: ${c.sesiones} sesiones, ${c.duracion_por_clase}`,
    `üí∞ Inversi√≥n √∫nica: ${c.inversion}`,
    `‚ÑπÔ∏è Nota: ${c.notas}`
  ].join('\n');
}

function infoCursoCatalogo(curso) {
  return [
    `üìò *${curso.nombre}*`,
    `üß≠ Modalidad en vivo: ${curso.modalidad.en_vivo}`,
    `üíæ Asincr√≥nico: ${curso.modalidad.asincrono}`,
    '',
    '¬øQuer√©s *temario*, *precio* o *duracion*? Escrib√≠, por ejemplo: "temario python" o "precio figma".'
  ].join('\n');
}

function temarioTexto(nombre, temario) {
  return [
    `üßæ *Temario ‚Äî ${nombre}*`,
    ...temario.map((t, i) => `${i + 1}. ${t}`)
  ].join('\n');
}

function precioTexto(nombre, modalidad) {
  // Responde precios claros seg√∫n modalidad
  return [
    `üí∞ *Precios ‚Äî ${nombre}*`,
    `‚Ä¢ En vivo: ${modalidad.en_vivo}`,
    `‚Ä¢ Asincr√≥nico: ${modalidad.asincrono}`
  ].join('\n');
}

function duracionTexto(nombre, modalidad) {
  // Extraemos duraci√≥n desde el copy de "en_vivo" de cada curso
  return [
    `‚è±Ô∏è *Duraci√≥n ‚Äî ${nombre}*`,
    `En vivo: ${modalidad.en_vivo}`
  ].join('\n');
}

function contactoTexto() {
  return [
    'üë§ *Hablar con asesor*',
    `Escribinos por WhatsApp al ${BUSINESS.whatsapp_publico}.`,
    'Contanos qu√© curso te interesa y te guiamos üôÇ'
  ].join('\n');
}

/* =========================
   INTENTS / RUTEO B√ÅSICO
   ========================= */
function resolverIntent(body) {
  const n = normalize(body);

  // Men√∫ numerado
  if (/^[1-5]$/.test(n)) {
    const opt = Number(n);
    if (opt === 1) return { type: 'proximo' };
    if (opt === 2) return { type: 'listar' };
    if (opt === 3) return { type: 'precios' };
    if (opt === 4) return { type: 'temarios' };
    if (opt === 5) return { type: 'contacto' };
  }

  // Palabras clave globales
  if (incluyeAlguna(n, ['menu', 'inicio', 'ayuda', 'opciones', '#menu'])) {
    return { type: 'menu' };
  }
  if (incluyeAlguna(n, ['asesor', 'humano', 'contacto', 'vendedor'])) {
    return { type: 'contacto' };
  }
  if (incluyeAlguna(n, ['proximo', 'en vivo', 'whatsapp', 'chatbot'])) {
    return { type: 'proximo' };
  }

  // --- Detectores de detalle (precio/temario/duracion) + curso ---
  const tokens = n.split(' ');
  const pidePrecio   = tokens.includes('precio') || tokens.includes('precios') || tokens.includes('costo') || tokens.includes('tarifa');
  const pideTemario  = tokens.includes('temario') || tokens.includes('temarios') || tokens.includes('contenido');
  const pideDuracion = tokens.includes('duracion') || tokens.includes('dura');

  // Buscamos curso
  const match = encontrarCurso(n);

  // Si pidieron detalle y hay curso, devolvemos el detalle
  if ((pidePrecio || pideTemario || pideDuracion) && match) {
    return {
      type: 'detalle',
      detalle: pidePrecio ? 'precio' : (pideTemario ? 'temario' : 'duracion'),
      curso: match.data
    };
  }

  // Si pidieron detalle pero NO especificaron curso
  if (pidePrecio || pideTemario || pideDuracion) {
    return { type: 'falta_curso' };
  }

  // Si mencion√≥ un curso (pero sin pedir detalle), damos ficha base
  if (match) {
    if (match.tipo === 'proximo') return { type: 'proximo' };
    return { type: 'curso', curso: match.data };
  }

  // Preguntas gen√©ricas
  if (incluyeAlguna(n, ['precios', 'costo', 'tarifas'])) {
    return { type: 'falta_curso' };
  }
  if (incluyeAlguna(n, ['temario', 'temarios', 'contenido'])) {
    return { type: 'falta_curso' };
  }
  if (incluyeAlguna(n, ['cursos', 'catalogo', 'lista'])) {
    return { type: 'listar' };
  }

  // Si preguntan por algo que no existe
  if (incluyeAlguna(n, ['curso de ', 'tienen ', 'hay '])) {
    return { type: 'no_disponible' };
  }

  // Fallback
  return { type: 'fallback' };
}


/* =========================
   RUTAS
   ========================= */

app.get('/', (_req, res) => res.send(`${BUSINESS.marca} ‚Äî Bot activo ‚úÖ`));
app.get('/healthz', (_req, res) => res.status(200).send('ok'));

app.post('/whatsapp', (req, res) => {
  const twiml = new MessagingResponse();
  const body = (req.body?.Body || '').trim();

  if (!body) {
    twiml.message('Escrib√≠ *men√∫* para ver opciones.');
    return res.type('text/xml').send(twiml.toString());
  }

  const intent = resolverIntent(body);

  switch (intent.type) {
    case 'menu':
      twiml.message(menuPrincipal());
      break;

    case 'proximo':
      twiml.message(`${infoProximoEnVivo()}\n\n¬øQuer√©s inscribirte? Escrib√≠ *asesor* para hablar con nosotros.`);
      break;

    case 'listar':
      twiml.message(`${listarCursos()}\n\nTip: ped√≠ *temario nombre* o *precio nombre* (ej: "temario python").`);
      break;

    case 'curso':
      twiml.message(infoCursoCatalogo(intent.curso));
      break;

    case 'detalle': {
      const c = intent.curso;
      if (intent.detalle === 'temario') {
        twiml.message(temarioTexto(c.nombre, c.temario));
      } else if (intent.detalle === 'precio') {
        twiml.message(precioTexto(c.nombre, c.modalidad));
      } else if (intent.detalle === 'duracion') {
        twiml.message(duracionTexto(c.nombre, c.modalidad));
      }
      break;
    }

    case 'precios':
      twiml.message('Decime *qu√© curso* te interesa (ej: "precio figma", "precio sql").');
      break;

    case 'temarios':
      twiml.message('Decime *qu√© curso* te interesa (ej: "temario photoshop", "temario python").');
      break;

    case 'contacto':
      twiml.message(`${contactoTexto()}\n\nTambi√©n pod√©s escribir *men√∫* para m√°s opciones.`);
      break;

    case 'falta_curso':
      twiml.message('Decime *qu√© curso* te interesa para darte el precio/temario. Ej: "precio python", "temario figma".');
      break;

    case 'no_disponible':
      twiml.message('Si pregunt√°s por *otro curso*, por el momento *no hay*. Pod√©s elegir uno de la lista con "cursos".');
      break;

    default:
      twiml.message(`${menuPrincipal()}\n\nSi quer√©s hablar con un humano, escrib√≠ *asesor*.`);
      break;
  }

  res.type('text/xml').send(twiml.toString());
});

/* =========================
   SERVER
   ========================= */

const port = process.env.PORT || 3000;
app.listen(port, () => {
  console.log(`‚úÖ ${BUSINESS.marca} bot escuchando en puerto ${port}`);
});

